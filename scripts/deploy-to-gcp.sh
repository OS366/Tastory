#!/bin/bash

# Deploy Tastory to Google Cloud Platform
# Usage: ./scripts/deploy-to-gcp.sh

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ID="tastory-hackathon"
REGION="us-central1"
SERVICE_NAME="tastory-api"

echo -e "${GREEN}🚀 Deploying Tastory to Google Cloud Platform${NC}"

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    echo -e "${RED}❌ Google Cloud SDK is not installed${NC}"
    echo "Please install it from: https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Step 1: Check if user is authenticated
echo -e "\n${YELLOW}Step 1: Checking authentication...${NC}"
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" &> /dev/null; then
    echo "Please authenticate with Google Cloud:"
    gcloud auth login
fi

# Step 2: Create or set project
echo -e "\n${YELLOW}Step 2: Setting up GCP project...${NC}"
if ! gcloud projects describe $PROJECT_ID &> /dev/null; then
    echo "Creating new project: $PROJECT_ID"
    gcloud projects create $PROJECT_ID --name="Tastory Recipe Search"
    
    # Link billing account (user needs to do this manually)
    echo -e "${YELLOW}⚠️  Please link a billing account to your project:${NC}"
    echo "   Visit: https://console.cloud.google.com/billing/linkedaccount?project=$PROJECT_ID"
    echo "   Press Enter when done..."
    read
fi

gcloud config set project $PROJECT_ID

# Step 3: Enable required APIs
echo -e "\n${YELLOW}Step 3: Enabling required APIs...${NC}"
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable containerregistry.googleapis.com
gcloud services enable secretmanager.googleapis.com
gcloud services enable firebase.googleapis.com

# Step 4: Set up MongoDB URI in Secret Manager
echo -e "\n${YELLOW}Step 4: Setting up secrets...${NC}"
if [ -z "$MONGODB_URI" ]; then
    if [ -f .env ]; then
        source .env
    fi
fi

if [ -z "$MONGODB_URI" ]; then
    echo -e "${RED}❌ MONGODB_URI not found${NC}"
    echo "Please set MONGODB_URI environment variable or add it to .env file"
    exit 1
fi

# Create or update secret
echo "mongodb_uri=$MONGODB_URI" | gcloud secrets create mongodb-uri --data-file=- 2>/dev/null || \
echo "mongodb_uri=$MONGODB_URI" | gcloud secrets versions add mongodb-uri --data-file=-

# Grant Cloud Run access to the secret
gcloud secrets add-iam-policy-binding mongodb-uri \
    --member="serviceAccount:$PROJECT_ID@appspot.gserviceaccount.com" \
    --role="roles/secretmanager.secretAccessor"

# Step 5: Build and deploy backend to Cloud Run
echo -e "\n${YELLOW}Step 5: Deploying backend to Cloud Run...${NC}"

# Build and deploy in one step
gcloud run deploy $SERVICE_NAME \
    --source . \
    --platform managed \
    --region $REGION \
    --allow-unauthenticated \
    --port 8080 \
    --min-instances 1 \
    --max-instances 100 \
    --memory 512Mi \
    --cpu 1 \
    --timeout 300 \
    --set-env-vars "DB_NAME=tastory,RECIPES_COLLECTION=recipes" \
    --set-secrets "MONGODB_URI=mongodb-uri:latest"

# Get the service URL
SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
echo -e "${GREEN}✅ Backend deployed to: $SERVICE_URL${NC}"

# Step 6: Update frontend configuration
echo -e "\n${YELLOW}Step 6: Updating frontend configuration...${NC}"
cat > frontend/.env.production.local << EOF
# Auto-generated by deploy-to-gcp.sh
REACT_APP_API_URL=$SERVICE_URL
REACT_APP_ENABLE_TTS=true
REACT_APP_ENABLE_RECENT_SEARCHES=true
REACT_APP_ENABLE_STATS_DISPLAY=true
EOF

echo -e "${GREEN}✅ Frontend configuration updated${NC}"

# Step 7: Build frontend
echo -e "\n${YELLOW}Step 7: Building frontend...${NC}"
cd frontend
npm install
npm run build
cd ..

# Step 8: Deploy frontend to Firebase
echo -e "\n${YELLOW}Step 8: Deploying frontend to Firebase...${NC}"

# Check if Firebase CLI is installed
if ! command -v firebase &> /dev/null; then
    echo -e "${YELLOW}Installing Firebase CLI...${NC}"
    npm install -g firebase-tools
fi

# Initialize Firebase if needed
if [ ! -f ".firebaserc" ]; then
    firebase use --add $PROJECT_ID
fi

# Deploy to Firebase Hosting
firebase deploy --only hosting

# Get the hosting URL
HOSTING_URL="https://$PROJECT_ID.web.app"

# Step 9: Set up Cloud Build trigger (optional)
echo -e "\n${YELLOW}Step 9: Setting up Cloud Build trigger...${NC}"
echo "To enable automatic deployments on git push:"
echo "1. Visit: https://console.cloud.google.com/cloud-build/triggers?project=$PROJECT_ID"
echo "2. Click 'Create Trigger'"
echo "3. Connect your GitHub repository"
echo "4. Use cloudbuild.yaml for build configuration"

# Step 10: Summary
echo -e "\n${GREEN}🎉 Deployment Complete!${NC}"
echo -e "\n${YELLOW}Your application is now live:${NC}"
echo -e "Frontend: ${GREEN}$HOSTING_URL${NC}"
echo -e "Backend API: ${GREEN}$SERVICE_URL${NC}"
echo -e "\n${YELLOW}Useful commands:${NC}"
echo "View logs: gcloud run logs read --service $SERVICE_NAME"
echo "Stream logs: gcloud run logs tail --service $SERVICE_NAME"
echo "Update backend: gcloud run deploy $SERVICE_NAME --source ."
echo "Update frontend: cd frontend && npm run build && firebase deploy"
echo -e "\n${YELLOW}Monitoring:${NC}"
echo "Cloud Run: https://console.cloud.google.com/run?project=$PROJECT_ID"
echo "Firebase: https://console.firebase.google.com/project/$PROJECT_ID"

# Optional: Open the app in browser
echo -e "\n${YELLOW}Would you like to open the app in your browser? (y/n)${NC}"
read -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    open "$HOSTING_URL"
fi 